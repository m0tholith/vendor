module glfw;

const long VERSION_MAJOR                = 3;
const long VERSION_MINOR                = 4;
const long VERSION_REVISION             = 0;
const long TRUE                         = 1;
const long FALSE                        = 0;
const long RELEASE                      = 0;
const long PRESS                        = 1;
const long REPEAT                       = 2;
const long HAT_CENTERED                 = 0;
const long HAT_UP                       = 1;
const long HAT_RIGHT                    = 2;
const long HAT_DOWN                     = 4;
const long HAT_LEFT                     = 8;
const long HAT_RIGHT_UP                 = (HAT_RIGHT | HAT_UP);
const long HAT_RIGHT_DOWN               = (HAT_RIGHT | HAT_DOWN);
const long HAT_LEFT_UP                  = (HAT_LEFT  | HAT_UP);
const long HAT_LEFT_DOWN                = (HAT_LEFT  | HAT_DOWN);
const long KEY_UNKNOWN                  = -1;
const long KEY_SPACE                    = 32;
const long KEY_APOSTROPHE               = 39;
const long KEY_COMMA                    = 44;
const long KEY_MINUS                    = 45;
const long KEY_PERIOD                   = 46;
const long KEY_SLASH                    = 47;
const long KEY_0                        = 48;
const long KEY_1                        = 49;
const long KEY_2                        = 50;
const long KEY_3                        = 51;
const long KEY_4                        = 52;
const long KEY_5                        = 53;
const long KEY_6                        = 54;
const long KEY_7                        = 55;
const long KEY_8                        = 56;
const long KEY_9                        = 57;
const long KEY_SEMICOLON                = 59;
const long KEY_EQUAL                    = 61;
const long KEY_A                        = 65;
const long KEY_B                        = 66;
const long KEY_C                        = 67;
const long KEY_D                        = 68;
const long KEY_E                        = 69;
const long KEY_F                        = 70;
const long KEY_G                        = 71;
const long KEY_H                        = 72;
const long KEY_I                        = 73;
const long KEY_J                        = 74;
const long KEY_K                        = 75;
const long KEY_L                        = 76;
const long KEY_M                        = 77;
const long KEY_N                        = 78;
const long KEY_O                        = 79;
const long KEY_P                        = 80;
const long KEY_Q                        = 81;
const long KEY_R                        = 82;
const long KEY_S                        = 83;
const long KEY_T                        = 84;
const long KEY_U                        = 85;
const long KEY_V                        = 86;
const long KEY_W                        = 87;
const long KEY_X                        = 88;
const long KEY_Y                        = 89;
const long KEY_Z                        = 90;
const long KEY_LEFT_BRACKET             = 91;
const long KEY_BACKSLASH                = 92;
const long KEY_RIGHT_BRACKET            = 93;
const long KEY_GRAVE_ACCENT             = 96;
const long KEY_WORLD_1                  = 161;
const long KEY_WORLD_2                  = 162;
const long KEY_ESCAPE                   = 256;
const long KEY_ENTER                    = 257;
const long KEY_TAB                      = 258;
const long KEY_BACKSPACE                = 259;
const long KEY_INSERT                   = 260;
const long KEY_DELETE                   = 261;
const long KEY_RIGHT                    = 262;
const long KEY_LEFT                     = 263;
const long KEY_DOWN                     = 264;
const long KEY_UP                       = 265;
const long KEY_PAGE_UP                  = 266;
const long KEY_PAGE_DOWN                = 267;
const long KEY_HOME                     = 268;
const long KEY_END                      = 269;
const long KEY_CAPS_LOCK                = 280;
const long KEY_SCROLL_LOCK              = 281;
const long KEY_NUM_LOCK                 = 282;
const long KEY_PRINT_SCREEN             = 283;
const long KEY_PAUSE                    = 284;
const long KEY_F1                       = 290;
const long KEY_F2                       = 291;
const long KEY_F3                       = 292;
const long KEY_F4                       = 293;
const long KEY_F5                       = 294;
const long KEY_F6                       = 295;
const long KEY_F7                       = 296;
const long KEY_F8                       = 297;
const long KEY_F9                       = 298;
const long KEY_F10                      = 299;
const long KEY_F11                      = 300;
const long KEY_F12                      = 301;
const long KEY_F13                      = 302;
const long KEY_F14                      = 303;
const long KEY_F15                      = 304;
const long KEY_F16                      = 305;
const long KEY_F17                      = 306;
const long KEY_F18                      = 307;
const long KEY_F19                      = 308;
const long KEY_F20                      = 309;
const long KEY_F21                      = 310;
const long KEY_F22                      = 311;
const long KEY_F23                      = 312;
const long KEY_F24                      = 313;
const long KEY_F25                      = 314;
const long KEY_KP_0                     = 320;
const long KEY_KP_1                     = 321;
const long KEY_KP_2                     = 322;
const long KEY_KP_3                     = 323;
const long KEY_KP_4                     = 324;
const long KEY_KP_5                     = 325;
const long KEY_KP_6                     = 326;
const long KEY_KP_7                     = 327;
const long KEY_KP_8                     = 328;
const long KEY_KP_9                     = 329;
const long KEY_KP_DECIMAL               = 330;
const long KEY_KP_DIVIDE                = 331;
const long KEY_KP_MULTIPLY              = 332;
const long KEY_KP_SUBTRACT              = 333;
const long KEY_KP_ADD                   = 334;
const long KEY_KP_ENTER                 = 335;
const long KEY_KP_EQUAL                 = 336;
const long KEY_LEFT_SHIFT               = 340;
const long KEY_LEFT_CONTROL             = 341;
const long KEY_LEFT_ALT                 = 342;
const long KEY_LEFT_SUPER               = 343;
const long KEY_RIGHT_SHIFT              = 344;
const long KEY_RIGHT_CONTROL            = 345;
const long KEY_RIGHT_ALT                = 346;
const long KEY_RIGHT_SUPER              = 347;
const long KEY_MENU                     = 348;
const long KEY_LAST                     = KEY_MENU;
const long MOD_SHIFT                    = 0x0001;
const long MOD_CONTROL                  = 0x0002;
const long MOD_ALT                      = 0x0004;
const long MOD_SUPER                    = 0x0008;
const long MOD_CAPS_LOCK                = 0x0010;
const long MOD_NUM_LOCK                 = 0x0020;
const long MOUSE_BUTTON_1               = 0;
const long MOUSE_BUTTON_2               = 1;
const long MOUSE_BUTTON_3               = 2;
const long MOUSE_BUTTON_4               = 3;
const long MOUSE_BUTTON_5               = 4;
const long MOUSE_BUTTON_6               = 5;
const long MOUSE_BUTTON_7               = 6;
const long MOUSE_BUTTON_8               = 7;
const long MOUSE_BUTTON_LAST            = MOUSE_BUTTON_8;
const long MOUSE_BUTTON_LEFT            = MOUSE_BUTTON_1;
const long MOUSE_BUTTON_RIGHT           = MOUSE_BUTTON_2;
const long MOUSE_BUTTON_MIDDLE          = MOUSE_BUTTON_3;
const long JOYSTICK_1                   = 0;
const long JOYSTICK_2                   = 1;
const long JOYSTICK_3                   = 2;
const long JOYSTICK_4                   = 3;
const long JOYSTICK_5                   = 4;
const long JOYSTICK_6                   = 5;
const long JOYSTICK_7                   = 6;
const long JOYSTICK_8                   = 7;
const long JOYSTICK_9                   = 8;
const long JOYSTICK_10                  = 9;
const long JOYSTICK_11                  = 10;
const long JOYSTICK_12                  = 11;
const long JOYSTICK_13                  = 12;
const long JOYSTICK_14                  = 13;
const long JOYSTICK_15                  = 14;
const long JOYSTICK_16                  = 15;
const long JOYSTICK_LAST                = JOYSTICK_16;
const long GAMEPAD_BUTTON_A             = 0;
const long GAMEPAD_BUTTON_B             = 1;
const long GAMEPAD_BUTTON_X             = 2;
const long GAMEPAD_BUTTON_Y             = 3;
const long GAMEPAD_BUTTON_LEFT_BUMPER   = 4;
const long GAMEPAD_BUTTON_RIGHT_BUMPER  = 5;
const long GAMEPAD_BUTTON_BACK          = 6;
const long GAMEPAD_BUTTON_START         = 7;
const long GAMEPAD_BUTTON_GUIDE         = 8;
const long GAMEPAD_BUTTON_LEFT_THUMB    = 9;
const long GAMEPAD_BUTTON_RIGHT_THUMB   = 10;
const long GAMEPAD_BUTTON_DPAD_UP       = 11;
const long GAMEPAD_BUTTON_DPAD_RIGHT    = 12;
const long GAMEPAD_BUTTON_DPAD_DOWN     = 13;
const long GAMEPAD_BUTTON_DPAD_LEFT     = 14;
const long GAMEPAD_BUTTON_LAST          = GAMEPAD_BUTTON_DPAD_LEFT;
const long GAMEPAD_BUTTON_CROSS         = GAMEPAD_BUTTON_A;
const long GAMEPAD_BUTTON_CIRCLE        = GAMEPAD_BUTTON_B;
const long GAMEPAD_BUTTON_SQUARE        = GAMEPAD_BUTTON_X;
const long GAMEPAD_BUTTON_TRIANGLE      = GAMEPAD_BUTTON_Y;
const long GAMEPAD_AXIS_LEFT_X          = 0;
const long GAMEPAD_AXIS_LEFT_Y          = 1;
const long GAMEPAD_AXIS_RIGHT_X         = 2;
const long GAMEPAD_AXIS_RIGHT_Y         = 3;
const long GAMEPAD_AXIS_LEFT_TRIGGER    = 4;
const long GAMEPAD_AXIS_RIGHT_TRIGGER   = 5;
const long GAMEPAD_AXIS_LAST            = GAMEPAD_AXIS_RIGHT_TRIGGER;
const long NO_ERROR                     = 0;
const long NOT_INITIALIZED              = 0x00010001;
const long NO_CURRENT_CONTEXT           = 0x00010002;
const long INVALID_ENUM                 = 0x00010003;
const long INVALID_VALUE                = 0x00010004;
const long OUT_OF_MEMORY                = 0x00010005;
const long API_UNAVAILABLE              = 0x00010006;
const long VERSION_UNAVAILABLE          = 0x00010007;
const long PLATFORM_ERROR               = 0x00010008;
const long FORMAT_UNAVAILABLE           = 0x00010009;
const long NO_WINDOW_CONTEXT            = 0x0001000A;
const long CURSOR_UNAVAILABLE           = 0x0001000B;
const long FEATURE_UNAVAILABLE          = 0x0001000C;
const long FEATURE_UNIMPLEMENTED        = 0x0001000D;
const long PLATFORM_UNAVAILABLE         = 0x0001000E;
const long FOCUSED                      = 0x00020001;
const long ICONIFIED                    = 0x00020002;
const long RESIZABLE                    = 0x00020003;
const long VISIBLE                      = 0x00020004;
const long DECORATED                    = 0x00020005;
const long AUTO_ICONIFY                 = 0x00020006;
const long FLOATING                     = 0x00020007;
const long MAXIMIZED                    = 0x00020008;
const long CENTER_CURSOR                = 0x00020009;
const long TRANSPARENT_FRAMEBUFFER      = 0x0002000A;
const long HOVERED                      = 0x0002000B;
const long FOCUS_ON_SHOW                = 0x0002000C;
const long MOUSE_PASSTHROUGH            = 0x0002000D;
const long POSITION_X                   = 0x0002000E;
const long POSITION_Y                   = 0x0002000F;
const long RED_BITS                     = 0x00021001;
const long GREEN_BITS                   = 0x00021002;
const long BLUE_BITS                    = 0x00021003;
const long ALPHA_BITS                   = 0x00021004;
const long DEPTH_BITS                   = 0x00021005;
const long STENCIL_BITS                 = 0x00021006;
const long ACCUM_RED_BITS               = 0x00021007;
const long ACCUM_GREEN_BITS             = 0x00021008;
const long ACCUM_BLUE_BITS              = 0x00021009;
const long ACCUM_ALPHA_BITS             = 0x0002100A;
const long AUX_BUFFERS                  = 0x0002100B;
const long STEREO                       = 0x0002100C;
const long SAMPLES                      = 0x0002100D;
const long SRGB_CAPABLE                 = 0x0002100E;
const long REFRESH_RATE                 = 0x0002100F;
const long DOUBLEBUFFER                 = 0x00021010;
const long CLIENT_API                   = 0x00022001;
const long CONTEXT_VERSION_MAJOR        = 0x00022002;
const long CONTEXT_VERSION_MINOR        = 0x00022003;
const long CONTEXT_REVISION             = 0x00022004;
const long CONTEXT_ROBUSTNESS           = 0x00022005;
const long OPENGL_FORWARD_COMPAT        = 0x00022006;
const long CONTEXT_DEBUG                = 0x00022007;
const long OPENGL_DEBUG_CONTEXT         = CONTEXT_DEBUG;
const long OPENGL_PROFILE               = 0x00022008;
const long CONTEXT_RELEASE_BEHAVIOR     = 0x00022009;
const long CONTEXT_NO_ERROR             = 0x0002200A;
const long CONTEXT_CREATION_API         = 0x0002200B;
const long SCALE_TO_MONITOR             = 0x0002200C;
const long SCALE_FRAMEBUFFER            = 0x0002200D;
const long COCOA_RETINA_FRAMEBUFFER     = 0x00023001;
const long COCOA_FRAME_NAME             = 0x00023002;
const long COCOA_GRAPHICS_SWITCHING     = 0x00023003;
const long X11_CLASS_NAME               = 0x00024001;
const long X11_INSTANCE_NAME            = 0x00024002;
const long WIN32_KEYBOARD_MENU          = 0x00025001;
const long WIN32_SHOWDEFAULT            = 0x00025002;
const long WAYLAND_APP_ID               = 0x00026001;
const long NO_API                       = 0;
const long OPENGL_API                   = 0x00030001;
const long OPENGL_ES_API                = 0x00030002;
const long NO_ROBUSTNESS                = 0;
const long NO_RESET_NOTIFICATION        = 0x00031001;
const long LOSE_CONTEXT_ON_RESET        = 0x00031002;
const long OPENGL_ANY_PROFILE           = 0;
const long OPENGL_CORE_PROFILE          = 0x00032001;
const long OPENGL_COMPAT_PROFILE        = 0x00032002;
const long CURSOR                       = 0x00033001;
const long STICKY_KEYS                  = 0x00033002;
const long STICKY_MOUSE_BUTTONS         = 0x00033003;
const long LOCK_KEY_MODS                = 0x00033004;
const long RAW_MOUSE_MOTION             = 0x00033005;
const long CURSOR_NORMAL                = 0x00034001;
const long CURSOR_HIDDEN                = 0x00034002;
const long CURSOR_DISABLED              = 0x00034003;
const long CURSOR_CAPTURED              = 0x00034004;
const long ANY_RELEASE_BEHAVIOR         = 0;
const long RELEASE_BEHAVIOR_FLUSH       = 0x00035001;
const long RELEASE_BEHAVIOR_NONE        = 0x00035002;
const long NATIVE_CONTEXT_API           = 0x00036001;
const long EGL_CONTEXT_API              = 0x00036002;
const long OSMESA_CONTEXT_API           = 0x00036003;
const long ANGLE_PLATFORM_TYPE_NONE     = 0x00037001;
const long ANGLE_PLATFORM_TYPE_OPENGL   = 0x00037002;
const long ANGLE_PLATFORM_TYPE_OPENGLES = 0x00037003;
const long ANGLE_PLATFORM_TYPE_D3D9     = 0x00037004;
const long ANGLE_PLATFORM_TYPE_D3D11    = 0x00037005;
const long ANGLE_PLATFORM_TYPE_VULKAN   = 0x00037007;
const long ANGLE_PLATFORM_TYPE_METAL    = 0x00037008;
const long WAYLAND_PREFER_LIBDECOR      = 0x00038001;
const long WAYLAND_DISABLE_LIBDECOR     = 0x00038002;
const long ANY_POSITION                 = 0x80000000;
const long ARROW_CURSOR                 = 0x00036001;
const long IBEAM_CURSOR                 = 0x00036002;
const long CROSSHAIR_CURSOR             = 0x00036003;
const long POINTING_HAND_CURSOR         = 0x00036004;
const long RESIZE_EW_CURSOR             = 0x00036005;
const long RESIZE_NS_CURSOR             = 0x00036006;
const long RESIZE_NWSE_CURSOR           = 0x00036007;
const long RESIZE_NESW_CURSOR           = 0x00036008;
const long RESIZE_ALL_CURSOR            = 0x00036009;
const long NOT_ALLOWED_CURSOR           = 0x0003600A;
const long HRESIZE_CURSOR               = RESIZE_EW_CURSOR;
const long VRESIZE_CURSOR               = RESIZE_NS_CURSOR;
const long HAND_CURSOR                  = POINTING_HAND_CURSOR;
const long CONNECTED                    = 0x00040001;
const long DISCONNECTED                 = 0x00040002;
const long JOYSTICK_HAT_BUTTONS         = 0x00050001;
const long ANGLE_PLATFORM_TYPE          = 0x00050002;
const long PLATFORM                     = 0x00050003;
const long COCOA_CHDIR_RESOURCES        = 0x00051001;
const long COCOA_MENUBAR                = 0x00051002;
const long X11_XCB_VULKAN_SURFACE       = 0x00052001;
const long WAYLAND_LIBDECOR             = 0x00053001;
const long ANY_PLATFORM                 = 0x00060000;
const long PLATFORM_WIN32               = 0x00060001;
const long PLATFORM_COCOA               = 0x00060002;
const long PLATFORM_WAYLAND             = 0x00060003;
const long PLATFORM_X11                 = 0x00060004;
const long PLATFORM_NULL                = 0x00060005;
const long DONT_CARE                    = -1;

struct VidMode
{
    int width;
    int height;
    int redBits;
    int greenBits;
    int blueBits;
    int refreshRate;
}

struct GammaRamp
{
    ushort* red;
    ushort* green;
    ushort* blue;
    uint size;
}

struct Image
{
    int width;
    int height;
    char* pixels;
}

struct GamepadState
{
    char[15] buttons;
    float[6] axes;
}

struct Allocator
{
    AllocateFun allocate;
    ReallocateFun reallocate;
    DeallocateFun deallocate;
    void* user;
}

typedef Monitor                 = void;
typedef Window                  = void;
typedef Cursor                  = void;

alias GlProc                = fn void ();
alias AllocateFun           = fn void*(usz size, void* user);
alias ReallocateFun         = fn void*(void* block, usz size, void* user);
alias DeallocateFun         = fn void (void* block, void* user);
alias ErrorFun              = fn void (int error_code, ZString description);
alias WindowPosFun          = fn void (Window* window, int xpos, int ypos);
alias WindowSizeFun         = fn void (Window* window, int width, int height);
alias WindowCloseFun        = fn void (Window* window);
alias WindowRefreshFun      = fn void (Window* window);
alias WindowFocusFun        = fn void (Window* window, int focused);
alias WindowIconifyFun      = fn void (Window* window, int iconified);
alias WindowMaximizeFun     = fn void (Window* window, int maximized);
alias FramebufferSizeFun    = fn void (Window* window, int width, int height);
alias WindowContentScaleFun = fn void (Window* window, float xscale, float yscale);
alias MouseButtonFun        = fn void (Window* window, int button, int action, int mods);
alias CursorPosFun          = fn void (Window* window, double xpos, double ypos);
alias CursorEnterFun        = fn void (Window* window, int entered);
alias ScrollFun             = fn void (Window* window, double xoffset, double yoffset);
alias KeyFun                = fn void (Window* window, int key, int scancode, int action, int mods);
alias CharFun               = fn void (Window* window, uint codepoint);
alias CharmodsFun           = fn void (Window* window, uint codepoint, int mods);
alias DropFun               = fn void (Window* window, int path_count, ZString* paths);
alias MonitorFun            = fn void (Monitor* monitor, int event);
alias JoystickFun           = fn void (int jid, int event);

fn int                   init() @extern("glfwInit");
fn void                  terminate() @extern("glfwTerminate");
fn void                  initHint(int hint, int value) @extern("glfwInitHint");
fn void                  initAllocator(Allocator* allocator) @extern("glfwInitAllocator");
fn void                  getVersion(int* major, int* minor, int* rev) @extern("glfwGetVersion");
fn ZString               getVersionString() @extern("glfwGetVersionString");
fn int                   getError(ZString* description) @extern("glfwGetError");
fn ErrorFun              setErrorCallback(ErrorFun callback) @extern("glfwSetErrorCallback");
fn int                   getPlatform() @extern("glfwGetPlatform");
fn int                   platformSupported(int platform) @extern("glfwPlatformSupported");
fn Monitor**             getMonitors(int* count) @extern("glfwGetMonitors");
fn Monitor*              getPrimaryMonitor() @extern("glfwGetPrimaryMonitor");
fn void                  getMonitorPos(Monitor* monitor, int* xpos, int* ypos) @extern("glfwGetMonitorPos");
fn void                  getMonitorWorkarea(Monitor* monitor, int* xpos, int* ypos, int* width, int* height) @extern("glfwGetMonitorWorkarea");
fn void                  getMonitorPhysicalSize(Monitor* monitor, int* widthMM, int* heightMM) @extern("glfwGetMonitorPhysicalSize");
fn void                  getMonitorContentScale(Monitor* monitor, float* xscale, float* yscale) @extern("glfwGetMonitorContentScale");
fn ZString               getMonitorName(Monitor* monitor) @extern("glfwGetMonitorName");
fn void                  setMonitorUserPointer(Monitor* monitor, void* pointer) @extern("glfwSetMonitorUserPointer");
fn void*                 getMonitorUserPointer(Monitor* monitor) @extern("glfwGetMonitorUserPointer");
fn MonitorFun            setMonitorCallback(MonitorFun callback) @extern("glfwSetMonitorCallback");
fn VidMode*              getVideoModes(Monitor* monitor, int* count) @extern("glfwGetVideoModes");
fn VidMode*              getVideoMode(Monitor* monitor) @extern("glfwGetVideoMode");
fn void                  setGamma(Monitor* monitor, float gamma) @extern("glfwSetGamma");
fn GammaRamp*            getGammaRamp(Monitor* monitor) @extern("glfwGetGammaRamp");
fn void                  setGammaRamp(Monitor* monitor, GammaRamp* ramp) @extern("glfwSetGammaRamp");
fn void                  defaultWindowHints() @extern("glfwDefaultWindowHints");
fn void                  windowHint(int hint, int value) @extern("glfwWindowHint");
fn void                  windowHintString(int hint, ZString value) @extern("glfwWindowHintString");
fn Window*               createWindow(int width, int height, ZString title, Monitor* monitor, Window* share) @extern("glfwCreateWindow");
fn void                  destroyWindow(Window* window) @extern("glfwDestroyWindow");
fn int                   windowShouldClose(Window* window) @extern("glfwWindowShouldClose");
fn void                  setWindowShouldClose(Window* window, int value) @extern("glfwSetWindowShouldClose");
fn ZString               getWindowTitle(Window* window) @extern("glfwGetWindowTitle");
fn void                  setWindowTitle(Window* window, ZString title) @extern("glfwSetWindowTitle");
fn void                  setWindowIcon(Window* window, int count, Image* images) @extern("glfwSetWindowIcon");
fn void                  getWindowPos(Window* window, int* xpos, int* ypos) @extern("glfwGetWindowPos");
fn void                  setWindowPos(Window* window, int xpos, int ypos) @extern("glfwSetWindowPos");
fn void                  getWindowSize(Window* window, int* width, int* height) @extern("glfwGetWindowSize");
fn void                  setWindowSizeLimits(Window* window, int minwidth, int minheight, int maxwidth, int maxheight) @extern("glfwSetWindowSizeLimits");
fn void                  setWindowAspectRatio(Window* window, int numer, int denom) @extern("glfwSetWindowAspectRatio");
fn void                  setWindowSize(Window* window, int width, int height) @extern("glfwSetWindowSize");
fn void                  getFramebufferSize(Window* window, int* width, int* height) @extern("glfwGetFramebufferSize");
fn void                  getWindowFrameSize(Window* window, int* left, int* top, int* right, int* bottom) @extern("glfwGetWindowFrameSize");
fn void                  getWindowContentScale(Window* window, float* xscale, float* yscale) @extern("glfwGetWindowContentScale");
fn float                 getWindowOpacity(Window* window) @extern("glfwGetWindowOpacity");
fn void                  setWindowOpacity(Window* window, float opacity) @extern("glfwSetWindowOpacity");
fn void                  iconifyWindow(Window* window) @extern("glfwIconifyWindow");
fn void                  restoreWindow(Window* window) @extern("glfwRestoreWindow");
fn void                  maximizeWindow(Window* window) @extern("glfwMaximizeWindow");
fn void                  showWindow(Window* window) @extern("glfwShowWindow");
fn void                  hideWindow(Window* window) @extern("glfwHideWindow");
fn void                  focusWindow(Window* window) @extern("glfwFocusWindow");
fn void                  requestWindowAttention(Window* window) @extern("glfwRequestWindowAttention");
fn Monitor*              getWindowMonitor(Window* window) @extern("glfwGetWindowMonitor");
fn void                  setWindowMonitor(Window* window, Monitor* monitor, int xpos, int ypos, int width, int height, int refreshRate) @extern("glfwSetWindowMonitor");
fn int                   getWindowAttrib(Window* window, int attrib) @extern("glfwGetWindowAttrib");
fn void                  setWindowAttrib(Window* window, int attrib, int value) @extern("glfwSetWindowAttrib");
fn void                  setWindowUserPointer(Window* window, void* pointer) @extern("glfwSetWindowUserPointer");
fn void*                 getWindowUserPointer(Window* window) @extern("glfwGetWindowUserPointer");
fn WindowPosFun          setWindowPosCallback(Window* window, WindowPosFun callback) @extern("glfwSetWindowPosCallback");
fn WindowSizeFun         setWindowSizeCallback(Window* window, WindowSizeFun callback) @extern("glfwSetWindowSizeCallback");
fn WindowCloseFun        setWindowCloseCallback(Window* window, WindowCloseFun callback) @extern("glfwSetWindowCloseCallback");
fn WindowRefreshFun      setWindowRefreshCallback(Window* window, WindowRefreshFun callback) @extern("glfwSetWindowRefreshCallback");
fn WindowFocusFun        setWindowFocusCallback(Window* window, WindowFocusFun callback) @extern("glfwSetWindowFocusCallback");
fn WindowIconifyFun      setWindowIconifyCallback(Window* window, WindowIconifyFun callback) @extern("glfwSetWindowIconifyCallback");
fn WindowMaximizeFun     setWindowMaximizeCallback(Window* window, WindowMaximizeFun callback) @extern("glfwSetWindowMaximizeCallback");
fn FramebufferSizeFun    setFramebufferSizeCallback(Window* window, FramebufferSizeFun callback) @extern("glfwSetFramebufferSizeCallback");
fn WindowContentScaleFun setWindowContentScaleCallback(Window* window, WindowContentScaleFun callback) @extern("glfwSetWindowContentScaleCallback");
fn void                  pollEvents() @extern("glfwPollEvents");
fn void                  waitEvents() @extern("glfwWaitEvents");
fn void                  waitEventsTimeout(double timeout) @extern("glfwWaitEventsTimeout");
fn void                  postEmptyEvent() @extern("glfwPostEmptyEvent");
fn int                   getInputMode(Window* window, int mode) @extern("glfwGetInputMode");
fn void                  setInputMode(Window* window, int mode, int value) @extern("glfwSetInputMode");
fn int                   rawMouseMotionSupported() @extern("glfwRawMouseMotionSupported");
fn ZString               getKeyName(int key, int scancode) @extern("glfwGetKeyName");
fn int                   getKeyScancode(int key) @extern("glfwGetKeyScancode");
fn int                   getKey(Window* window, int key) @extern("glfwGetKey");
fn int                   getMouseButton(Window* window, int button) @extern("glfwGetMouseButton");
fn void                  getCursorPos(Window* window, double* xpos, double* ypos) @extern("glfwGetCursorPos");
fn void                  setCursorPos(Window* window, double xpos, double ypos) @extern("glfwSetCursorPos");
fn Cursor*               createCursor(Image* image, int xhot, int yhot) @extern("glfwCreateCursor");
fn Cursor*               createStandardCursor(int shape) @extern("glfwCreateStandardCursor");
fn void                  destroyCursor(Cursor* cursor) @extern("glfwDestroyCursor");
fn void                  setCursor(Window* window, Cursor* cursor) @extern("glfwSetCursor");
fn KeyFun                setKeyCallback(Window* window, KeyFun callback) @extern("glfwSetKeyCallback");
fn CharFun               setCharCallback(Window* window, CharFun callback) @extern("glfwSetCharCallback");
fn CharmodsFun           setCharModsCallback(Window* window, CharmodsFun callback) @extern("glfwSetCharModsCallback");
fn MouseButtonFun        setMouseButtonCallback(Window* window, MouseButtonFun callback) @extern("glfwSetMouseButtonCallback");
fn CursorPosFun          setCursorPosCallback(Window* window, CursorPosFun callback) @extern("glfwSetCursorPosCallback");
fn CursorEnterFun        setCursorEnterCallback(Window* window, CursorEnterFun callback) @extern("glfwSetCursorEnterCallback");
fn ScrollFun             setScrollCallback(Window* window, ScrollFun callback) @extern("glfwSetScrollCallback");
fn DropFun               setDropCallback(Window* window, DropFun callback) @extern("glfwSetDropCallback");
fn int                   joystickPresent(int jid) @extern("glfwJoystickPresent");
fn float*                getJoystickAxes(int jid, int* count) @extern("glfwGetJoystickAxes");
fn ZString               getJoystickButtons(int jid, int* count) @extern("glfwGetJoystickButtons");
fn ZString               getJoystickHats(int jid, int* count) @extern("glfwGetJoystickHats");
fn ZString               getJoystickName(int jid) @extern("glfwGetJoystickName");
fn ZString               getJoystickGUID(int jid) @extern("glfwGetJoystickGUID");
fn void                  setJoystickUserPointer(int jid, void* pointer) @extern("glfwSetJoystickUserPointer");
fn void*                 getJoystickUserPointer(int jid) @extern("glfwGetJoystickUserPointer");
fn int                   joystickIsGamepad(int jid) @extern("glfwJoystickIsGamepad");
fn JoystickFun           setJoystickCallback(JoystickFun callback) @extern("glfwSetJoystickCallback");
fn int                   updateGamepadMappings(ZString string) @extern("glfwUpdateGamepadMappings");
fn ZString               getGamepadName(int jid) @extern("glfwGetGamepadName");
fn int                   getGamepadState(int jid, GamepadState* state) @extern("glfwGetGamepadState");
fn void                  setClipboardString(Window* window, ZString string) @extern("glfwSetClipboardString");
fn ZString               getClipboardString(Window* window) @extern("glfwGetClipboardString");
fn double                getTime() @extern("glfwGetTime");
fn void                  setTime(double time) @extern("glfwSetTime");
fn ulong                 getTimerValue() @extern("glfwGetTimerValue");
fn ulong                 getTimerFrequency() @extern("glfwGetTimerFrequency");
fn void                  makeContextCurrent(Window* window) @extern("glfwMakeContextCurrent");
fn Window*               getCurrentContext() @extern("glfwGetCurrentContext");
fn void                  swapBuffers(Window* window) @extern("glfwSwapBuffers");
fn void                  swapInterval(int interval) @extern("glfwSwapInterval");
fn int                   extensionSupported(ZString extension) @extern("glfwExtensionSupported");
fn GlProc                getProcAddress(ZString procname) @extern("glfwGetProcAddress");
fn int                   vulkanSupported() @extern("glfwVulkanSupported");
fn ZString*              getRequiredInstanceExtensions(uint* count) @extern("glfwGetRequiredInstanceExtensions");

module vulkan @if($defined(env::GLFW_INCLUDE_VULKAN) &&& GLFW_INCLUDE_VULKAN);
import glfw;

alias Vkproc = fn void();

fn void     initVulkanLoader(PFN_vkGetInstanceProcAddr loader) @extern("glfwInitVulkanLoader");
fn Vkproc   getInstanceProcAddress(VkInstance instance, ZString procname) @extern("glfwGetInstanceProcAddress");
fn VkResult createWindowSurface(VkInstance instance, Window* window, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface) @extern("glfwCreateWindowSurface");
fn int      getPhysicalDevicePresentationSupport(VkInstance instance, VkPhysicalDevice device, uint queuefamily) @extern("glfwGetPhysicalDevicePresentationSupport");
